---
### Execution vars; required (with defaults)
# 2 ways to deploy a VM from template:
# proxmox_vm_from_template_meta_host: false
#   sets delegate_to: {{ inventory_hostname }} -- which should be the proxmox host (this is the default behavior of all ansible runs)
#   variables defined from within the context of the proxmox host host_vars.
#     Cons:
#       - Only one VM can be defined per playbook. OR somehow loop over a list of variables for instantiation.
#     Pros:
#       - Easy to understand - individual VM instatiations in one place.
#
# proxmox_vm_from_template_meta_host: true
#   sets delegate_to: {{ proxmox_vm_from_template_target_host }} -- which is the proxmox host
#   variables defined from within the context of VM host_vars. Where the VM is the same VM being created.
#     Cons:
#       - Complex setup - need to define host_vars first ('meta' host, since it might not exist until after running role).
#       - Disable fact gathering on deployment, which could introduce errors. This is required because the VM might not exist.
#     Pros:
#       - Multiple VM definitions without the need to iterate over a list of dicts with definitions for each VM.
#       - VM instatiation info associated with host_vars of VM.
#
proxmox_vm_from_template_meta_host: false
# Choose to either create or remove vm: present, absent
proxmox_vm_from_template_state: "present"
# Should the vm startup after creation?
proxmox_vm_from_template_startup: false
# Format the template disk should be in: raw, qcow2
proxmox_vm_from_template_format: "raw"

### API vars; required (with defaults)
proxmox_vm_from_template_target_host: "{{ inventory_hostname }}"
proxmox_vm_from_template_target_node: "{{ inventory_hostname_short }}"
### API vars; required
# proxmox_vm_from_template_root_user_password: ""
# proxmox_vm_from_template_api_token_id: ""
# proxmox_vm_from_template_api_token_secret: ""
# proxmox_vm_from_template_api_user: "root@pam"

### Template handling vars; required
# proxmox_vm_from_template_dest_id: "100"
# proxmox_vm_from_template_dest_name: "vm-name"
# proxmox_vm_from_template_src_id: "101"
# proxmox_vm_from_template_src_name: "template-name"
# proxmox_vm_from_template_storage: "local-lvm"

### New VM modification vars; optional
# Update the VM with new specs after clone:
# proxmox_vm_from_template_update:
#   cores: 4
#   sockets: 1
#   memory: 4096
# Increase (only) primary disk size:
# proxmox_vm_from_template_main_disk_size: "20G"
# Update storage - uses qm utility
# proxmox_vm_from_template_disks:
#   "scsi1":
#     size: "32"
#     storage: "local-lvm"
# Update networking - uses qm utility
# proxmox_vm_from_template_networks:
#   "net0":
#     model: "virtio"
#     bridge: "vmbr0"
#     firewall: "0"
#     macaddr: "70:55:7F:83:2D:B1"
#     tag: "10"

### cloud-init handling vars; optional
# proxmox_vm_from_template_ci_user_data_file_path: "/var/lib/vz/snippets/"
# proxmox_vm_from_template_ci_user_data_file_name: "{{ inventory_hostname_short }}-user-data"
# proxmox_vm_from_template_ci_user_data_volume: "local-lvm"
# proxmox_vm_from_template_ci_user_data_src_file: "files/user-data.txt"
# proxmox_vm_from_template_ci_user_data_content: |
#   #cloud-config
#   manage_etc_hosts: true
#   ssh_pwauth: false
#   chpasswd:
#     expire: False
#   package_upgrade: true
#   package_reboot_if_required: true
#   locale: en_US.UTF-8
#   timezone: UTC
#   packages:
#    - qemu-guest-agent
